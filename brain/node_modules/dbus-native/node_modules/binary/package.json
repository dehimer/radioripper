{
  "name": "binary",
  "version": "0.2.0",
  "description": "Unpack multibyte binary values from buffers",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-binary.git"
  },
  "keywords": [
    "binary",
    "decode",
    "endian",
    "unpack",
    "signed",
    "unsigned"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "dependencies": {
    "chainsaw": ">=0.0.7",
    "put": ">=0.0.1",
    "buffers": ">=0.0.1"
  },
  "devDependencies": {
    "seq": ">=0.1.7",
    "expresso": ">=0.6.0"
  },
  "scripts": {
    "test": "expresso"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.2.0"
  },
  "readme": "Binary\n======\n\nUnpack multibyte binary values from buffers and streams.\nYou can specify the endianness and signedness of the fields to be unpacked too.\n\nThis module is a cleaner and more complete version of\n[bufferlist](https://github.com/substack/node-bufferlist)'s binary module that\nruns on pre-allocated buffers instead of a linked list.\n\nExamples\n========\n\nparse.js\n--------\n\n    var buf = new Buffer([ 97, 98, 99, 100, 101, 102, 0 ]);\n    \n    var Binary = require('binary');\n    var vars = Binary.parse(buf)\n        .word16ls('ab')\n        .word32bu('cf')\n        .word8('x')\n        .vars\n    ;\n    console.dir(vars);\n-\n    $ node parse.js\n    { ab: 25185, cf: 1667523942, x: 0 }\n\nstream.js\n---------\n\n    var Binary = require('binary');\n    var stdin = process.openStdin();\n    \n    Binary.stream(stdin)\n        .word32lu('x')\n        .word16bs('y')\n        .word16bu('z')\n        .tap(function (vars) {\n            console.dir(vars);\n        })\n    ;\n-\n    $ node examples/stream.js\n    abcdefgh\n    { x: 1684234849, y: 25958, z: 26472 }\n    ^D\n\nMethods\n=======\n\nBinary.parse(buf)\n-----------------\n\nParse a static buffer in one pass. Returns a chainable interface with the\nmethods below plus a `vars` field to get at the variable stash as the last item\nin a chain.\n\nIn parse mode, methods will set their keys to `null` if the buffer isn't big\nenough except `buffer()` and `scan()` which read up up to the end of the buffer\nand stop.\n\nBinary.stream(emitter, eventName='data')\n----------------------------------------\n\nParse a stream of buffer events from `eventName`. Each action will only execute\nonce enough data has arrived from the event emitter.\n\nBinary(bufOrEm, eventName)\n--------------------------\n\nIf `bufOrEm` is a Buffer, returns `Binary.parse(bufOrEm)`, else returns\n`Binary.stream(bufOrEm, eventName)`\n\nBinary.put()\n------------\n\nReturns a new [put object](http://github.com/substack/node-put).\n\nword{8,16,32,64}{l,b}{e,u,s}(key)\n----------------------------------\n\nParse bytes in the buffer or stream given:\n\n* number of bits\n* endianness ( l : little, b : big ),\n* signedness ( u and e : unsigned, s : signed )\n\nThese functions won't start parsing until all previous parser functions have run\nand the data is available.\n\nThe result of the parse goes into the variable stash at `key`.\nIf `key` has dots (`.`s), it refers to a nested address. If parent container\nvalues don't exist they will be created automatically, so for instance you can\nassign into `dst.addr` and `dst.port` and the `dst` key in the variable stash\nwill be `{ addr : x, port : y }` afterwards.\n\nbuffer(key, size)\n-----------------\n\nTake `size` bytes directly off the buffer stream, putting the resulting buffer\nslice in the variable stash at `key`. If `size` is a string, use the value at\n`vars[size]`. The key follows the same dotted address rules as the word\nfunctions.\n\nscan(key, buffer)\n-----------------\n\nSearch for `buffer` in the stream and store all the intervening data in the\nstash at at `key`, excluding the search buffer. If `buffer` passed as a string,\nit will be converted into a Buffer internally.\n\nFor example, to read in a line you can just do:\n\n    Binary(em)\n        .scan('line', new Buffer('\\r\\n'))\n        .tap(function (vars) {\n            console.log(vars.line)\n        })\n    ;\n\ntap(cb)\n-------\n\nThe callback `cb` is provided with the variable stash from all the previous\nactions once they've all finished.\n\nYou can nest additional actions onto `this` inside the callback.\n\ninto(key, cb)\n-------------\n\nLike `.tap()`, except all nested actions will assign into a `key` in the `vars`\nstash.\n\nloop(cb)\n--------\n\nLoop, each time calling `cb(end, vars)` for function `end` and the variable\nstash with `this` set to a new chain for nested parsing. The loop terminates\nonce `end` is called.\n\nflush()\n-------\n\nClear the variable stash entirely.\n\nInstallation\n============\n\nTo install with [npm](http://github.com/isaacs/npm):\n \n    npm install binary\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso):\n\n    expresso\n\nNotes\n=====\n\nThe word64 functions will only return approximations since javascript uses ieee\nfloating point for all number types. Mind the loss of precision.\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-binary/issues"
  },
  "homepage": "https://github.com/substack/node-binary",
  "_id": "binary@0.2.0",
  "dist": {
    "shasum": "a526e3e1b83ea349ed1304db248236ec0c2ee311"
  },
  "_from": "binary@0.2.0",
  "_resolved": "https://registry.npmjs.org/binary/-/binary-0.2.0.tgz"
}
